from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, InputMediaPhoto
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.crud import CRUDBlockText, CRUDMedia
from app.keyboards.menu_kb import menu_kb
from config import config
from app.constants import PictureStatus, BlockText, MediaType, MediaBlock
from app.fsm.fsm import FSMRent
from app.keyboards.rent_kb import (
    cancel_rent,
    communication_method,
    rent,
    rental_request,
    send,
    send_contact,
)
from app.lexicon.lexicon_ru import LEXICON_MENU_BUTTONS, LEXICON_RENT
from app.text_creator import TextCreator

router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é '–ê—Ä–µ–Ω–¥–∞'
@router.message(F.text == LEXICON_MENU_BUTTONS['rent'])
async def rent_button(message: Message, session: AsyncSession):
    rent_text = await CRUDBlockText.get_text_by_block(session, block=BlockText.RENT)
    if rent_text:
        await message.answer(text=rent_text, parse_mode=ParseMode.MARKDOWN_V2)
    media = await CRUDMedia.get_media(
        session, media_type_id=MediaType.PHOTO, media_block_id=MediaBlock.RENT
    )
    if media:
        media = [InputMediaPhoto(media=photo.media_id) for photo in media]
        await message.answer_media_group(media=media)
    await message.answer(text='–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å üëá', reply_markup=rent())


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "cancel"
@router.callback_query(F.data == 'cancel_button', ~StateFilter(default_state))
async def cancel_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text=LEXICON_RENT['cancel'], reply_markup=rental_request()
    )
    await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –ø–æ–º–µ—â–µ–Ω–∏—è' –∏ –∫–Ω–æ–ø–∫—É '–ò—Å–ø—Ä–∞–≤–∏—Ç—å'
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.callback_query(F.data == 'repeat_request', StateFilter(FSMRent.send_rent))
@router.callback_query(F.data == 'rental_request')
async def rental_request_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        text=LEXICON_RENT['telephone'], reply_markup=send_contact()
    )
    await state.set_state(FSMRent.enter_telephone)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
@router.message(StateFilter(FSMRent.enter_telephone))
async def telephone_sent(message: Message, state: FSMContext):
    if (message.text and message.text.isdigit()) or message.contact:
        await message.answer(text='üëç', reply_markup=ReplyKeyboardRemove())
        if message.text:
            await state.update_data(enter_telephone=message.text)
        elif message.contact:
            await state.update_data(enter_telephone=message.contact.phone_number)
        await message.answer(
            text=LEXICON_RENT['how_contact'], reply_markup=communication_method()
        )
        await state.set_state(FSMRent.how_contact)
    else:
        await message.answer(
            text=f'{LEXICON_RENT["not_telephone"]}\n\n' f'{LEXICON_RENT["breaking"]}',
            reply_markup=cancel_rent(),
        )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@router.callback_query(
    StateFilter(FSMRent.how_contact), F.data.in_(['call', 'telegram', 'whatsapp'])
)
async def how_contact_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(how_contact=LEXICON_RENT[callback.data])
    await callback.message.delete()  # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(
        text=f'–¢—ã –≤—ã–±—Ä–∞–ª - {LEXICON_RENT[callback.data]}\n\n' f'{LEXICON_RENT["date"]}'
    )
    await state.set_state(FSMRent.date)


# –•–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
# –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMRent.how_contact))
async def warning_not_contact(message: Message):
    await message.answer(
        text=f'{LEXICON_RENT["not_contact"]}\n\n' f'{LEXICON_RENT["breaking"]}',
        reply_markup=cancel_rent(),
    )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(StateFilter(FSMRent.date))
async def date_sent(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer(text=LEXICON_RENT['event'])
    await state.set_state(FSMRent.event)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫
@router.message(StateFilter(FSMRent.event))
async def event_sent(message: Message, state: FSMContext):
    await state.update_data(event=message.text)
    await message.answer(text=LEXICON_RENT['how_people'])
    await state.set_state(FSMRent.how_people)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.message(StateFilter(FSMRent.how_people))
async def how_people_sent(message: Message, state: FSMContext, session: AsyncSession):
    text = message.text
    if text.isdigit():
        await state.update_data(how_people=message.text)
        data = await state.get_data()
        text = await TextCreator.create_text_rent(
            session, user_id=message.from_user.id, mode=PictureStatus.RENT, **data
        )
        await message.answer(
            text=f'{LEXICON_RENT["finish"]}\n\n' f'{text}',
            reply_markup=send(),
        )
        await state.set_state(FSMRent.send_rent)
        await state.update_data(text=text)
    else:
        await message.answer(
            text=f'{LEXICON_RENT["not_people"]}\n\n' f'{LEXICON_RENT["breaking"]}',
            reply_markup=cancel_rent(),
        )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
@router.callback_query(StateFilter(FSMRent.send_rent), F.data == 'send')
async def send_press(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    await callback.message.answer(text=LEXICON_RENT['sending'])
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    await callback.message.answer(text=f'{data["text"]}', reply_markup=menu_kb())
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏
    await bot.send_message(chat_id=config.tg_bot.admin_group_id, text=f'{data["text"]}')
    await state.clear()
