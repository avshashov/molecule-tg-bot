from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.database.database import users_db
from app.fsm.fsm import FSM_SET_NAME
from app.keyboards.menu_kb import menu_kb
from app.keyboards.user_name_setting import yes_no_kb
from app.lexicon.lexicon_ru import LEXICON_MENU_BUTTONS, LEXICON_SET_USER_NAME

router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" - –±—É–¥–µ—Ç
# –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ –±—ã–ª–æ
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id in users_db:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        await message.answer(
            text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è ü§ù, {users_db[message.from_user.id]["name"]}, —è –ù–µ–±—É–ª–∞üåÄ - –±–æ—Ç –ú–æ–ª–µ–∫—É–ª—ã¬©Ô∏è\n\n'
            f'{LEXICON_MENU_BUTTONS["text_menu"]}',
            reply_markup=menu_kb(),
        )

    elif message.from_user.full_name:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ—É–ª–ª –Ω–µ–π–º
        await message.answer(
            text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è ü§ù, {message.from_user.full_name}, —è –ù–µ–±—É–ª–∞üåÄ - –±–æ—Ç –ú–æ–ª–µ–∫—É–ª—ã¬©Ô∏è\n\n'
            '–ú–æ–≥—É –ª–∏ —è –∫ —Ç–µ–±–µ —Ç–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?',
            reply_markup=yes_no_kb(),
        )
        # –µ—Å–ª–∏ –¥–∞ —Ç–æ –∑–∞–Ω–æ—Å–∏–º –∏–º—è –≤ –±–∞–∑—É
        # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏,
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è, –¥–∞–ª–µ–µ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –±–∞–∑—É

    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ—É–ª–ª –Ω–µ–π–º
        await message.answer(text=LEXICON_SET_USER_NAME['unknown'])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è, –∑–∞–Ω–æ—Å–∏–º –≤ –±–∞–∑—É
        await state.set_state(FSM_SET_NAME.enter_name)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/contacts"
@router.message(Command(commands='contacts'))
async def contacts_command(message: Message):
    await message.answer(text=LEXICON_MENU_BUTTONS['contacts'])


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/invite"
@router.message(Command(commands='invite'))
async def invite_command(message: Message):
    await message.answer(
        text=f'{LEXICON_MENU_BUTTONS["invite"]}\n\nhttps://t.me/Molecule_nebula_bot'
    )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
@router.callback_query(F.data == 'main_menu')
async def main_menu_button(callback: CallbackQuery):
    await callback.message.answer(
        text=LEXICON_MENU_BUTTONS["text_menu"], reply_markup=menu_kb()
    )
