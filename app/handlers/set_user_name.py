from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.database import users_db
from app.fsm.fsm import FSM_SET_NAME
from app.keyboards.menu_kb import menu_kb
from app.keyboards.user_name_setting import yes_no_name_kb
from app.lexicon.lexicon_ru import LEXICON_MENU_BUTTONS, LEXICON_SET_USER_NAME
from app.database.crud import CRUDUser
from app.schemas import UserCreate


router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–ê" –∑–∞–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == 'of_course')
async def of_course_answer(callback: CallbackQuery, session: AsyncSession):
    user = UserCreate(
        username=callback.from_user.username, 
        user_id=callback.from_user.id, 
        full_name=callback.from_user.full_name,
        )
    await CRUDUser.create_user(session, user)
    await callback.message.delete()
    await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ üëç\n\n', reply_markup=menu_kb())


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ +
# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–ï–¢" - –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ –∏–º—è –µ—â–µ —Ä–∞–∑
@router.callback_query(F.data == 'another name')
@router.callback_query(F.data == 'not', StateFilter(FSM_SET_NAME.enter_name))
async def replace_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text=LEXICON_SET_USER_NAME['what_is_your_name'])
    await state.set_state(FSM_SET_NAME.enter_name)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: –æ—Å—Ç–∞–≤–∏—Ç—å –∏–º—è –∏–ª–∏ –Ω–µ—Ç?
@router.message(StateFilter(FSM_SET_NAME.enter_name))
async def name_sent(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        text=f'–û—Å—Ç–∞–≤–∏–º –∏–º—è "{message.text}" ?', reply_markup=yes_no_name_kb()
    )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É –î–ê (–ø–æ–¥—Ç–≤–µ—Ä–¥–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏) - –∑–∞–Ω–æ—Å–∏—Ç –∏–º—è –≤ –±–∞–∑—É, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–Ω—é
@router.callback_query(F.data == 'confirm', StateFilter(FSM_SET_NAME.enter_name))
async def confirm(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –∑–∞–Ω–æ—Å–∏–º –∏–º—è –≤ –±–∞–∑—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    full_name = (await state.get_data()).get('name')
    user = UserCreate(
        username=callback.from_user.username, 
        user_id=callback.from_user.id, 
        full_name=full_name,
        )
    await CRUDUser.create_user(session, user)
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è ü§ù, {full_name}!',
        reply_markup=menu_kb(),
    )
