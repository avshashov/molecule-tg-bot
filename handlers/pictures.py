from aiogram import F, Router, Bot
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from lexicon.lexicon_ru import LEXICON_MENU_BUTTONS, LEXICON_PICTURES, LEXICON_RENT
from database.database import users_db
from keyboards.keyboards import (
    pictures,
    buy_ready,
    method_contact,
    send_contact,
    send_correct,
    cancel_picture,
)
from config_data.config import config

from aiogram.fsm.context import FSMContext
from fsm.fsm import FSM_PICTURE
from aiogram.fsm.state import default_state


router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é '–ö–∞—Ä—Ç–∏–Ω—ã'
@router.message(F.text == LEXICON_MENU_BUTTONS['pictures'])
async def pictures_button(message: Message):
    await message.answer(text=LEXICON_PICTURES['pictures'], reply_markup=pictures())


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é'
@router.callback_query(F.data == 'buy_ready')
async def buy_button(callback: CallbackQuery):
    await callback.message.edit_text(
        text=LEXICON_PICTURES['buy_ready_description'], reply_markup=buy_ready()
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π' –∏ –∫–Ω–æ–ø–∫—É '–ò—Å–ø—Ä–∞–≤–∏—Ç—å' –∞ —Ç–∞–∫–∂–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É'
@router.callback_query(F.data == 'correct', StateFilter(FSM_PICTURE.send))
@router.callback_query(F.data == 'contact_me')
@router.callback_query(F.data == 'order_painting')
async def contact_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text=LEXICON_PICTURES['how_contact_2'], reply_markup=method_contact())
    await callback.answer()
    if callback.data in ['contact_me', 'correct']:
        await callback.message.edit_text(text=LEXICON_PICTURES['pictures'], reply_markup=pictures())
    elif callback.data == 'order_painting':
        await state.set_state(FSM_PICTURE.how_contact_order)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
@router.callback_query(F.data == 'cancel_button_pictures', ~StateFilter(default_state))
async def cancel_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text=LEXICON_PICTURES['cancel_process'], reply_markup=pictures())
    await state.clear()
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–∏ '–ó–≤–æ–Ω–æ–∫', 'whatsapp', 'telegram'
@router.callback_query(
    StateFilter(FSM_PICTURE.how_contact_buy_ready, FSM_PICTURE.how_contact_order),
    F.data.in_(['call', 'telegram', 'whatsapp']),
)
async def how_contact(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await state.update_data(how_contact=LEXICON_RENT[callback.data])
    await callback.message.answer(text=LEXICON_PICTURES['number'], reply_markup=send_contact())
    if FSM_PICTURE.how_contact_buy_ready == await state.get_state():
        await state.set_state(FSM_PICTURE.enter_telephone_buy_ready)
    elif FSM_PICTURE.how_contact_order == await state.get_state():
        await state.set_state(FSM_PICTURE.enter_telephone_order)


# –•–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
# –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSM_PICTURE.how_contact_buy_ready))
async def warning_not_contact(message: Message):
    await message.answer(
        text=f'{LEXICON_RENT["not_contact"]}\n\n' f'{LEXICON_PICTURES["breaking"]}',
        reply_markup=method_contact(),
    )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É 'email'
@router.callback_query(
    StateFilter(FSM_PICTURE.how_contact_buy_ready, FSM_PICTURE.how_contact_order), F.data == 'email'
)
async def email_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(text=LEXICON_PICTURES['enter_email'])
    if FSM_PICTURE.how_contact_buy_ready == await state.get_state():
        await state.set_state(FSM_PICTURE.enter_email_buy_ready)
    elif FSM_PICTURE.how_contact_order == await state.get_state():
        await state.set_state(FSM_PICTURE.enter_email_order)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email –∏–ª–∏ –Ω–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö -
# –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç–∏–Ω—ã –∏ –ö—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É
# –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –ö—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é,
# –ª–∏–±–æ –ø—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–æ–ø—Ä–æ—Å—ã)
@router.message(StateFilter(FSM_PICTURE.enter_email_buy_ready, FSM_PICTURE.enter_email_order))
@router.message(StateFilter(FSM_PICTURE.enter_telephone_buy_ready, FSM_PICTURE.enter_telephone_order))
@router.message(
    F.contact, StateFilter(FSM_PICTURE.enter_telephone_buy_ready, FSM_PICTURE.enter_telephone_order)
)
async def contact_sent(message: Message, state: FSMContext):
    text = ''
    id = message.from_user.id
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (
        FSM_PICTURE.enter_telephone_buy_ready == await state.get_state()
        or FSM_PICTURE.enter_telephone_order == await state.get_state()
    ) and ((message.text and message.text.isdigit()) or message.contact):
        await message.answer(text='üëç', reply_markup=ReplyKeyboardRemove())
        if message.text:
            await state.update_data(enter_telephone=message.text)
        elif message.contact:
            await state.update_data(enter_telephone=message.contact.phone_number)

        data = await state.get_data()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω
        text = f'''–ó–∞–∫–∞–∑: –ì–æ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∞
–ò–º—è: {users_db[id]["name"]}
–¢–µ–ª–µ—Ñ–æ–Ω: {data["enter_telephone"]}
–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data["how_contact"]}\n'''

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–≤–æ–¥ email (–ö—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é)
    if FSM_PICTURE.enter_email_buy_ready == await state.get_state():
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f'''–ó–∞–∫–∞–∑: –ì–æ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∞
–ò–º—è: {users_db[id]["name"]}
E-mail: {message.text}'''

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–≤–æ–¥ email (–ó–∞–∫–∞–∑)
    if FSM_PICTURE.enter_email_order == await state.get_state():
        await state.update_data(enter_email=message.text)
        await message.answer(text=LEXICON_PICTURES['addressee'])
        await state.set_state(FSM_PICTURE.for_whom)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ö—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é
    if text and (
        FSM_PICTURE.enter_telephone_buy_ready == await state.get_state()
        or FSM_PICTURE.enter_email_buy_ready == await state.get_state()
    ):
        await message.answer(
            text=f'–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ -\n\n{text}\n–ï—Å–ª–∏ –≤–µ—Ä–Ω–æ - –∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", –µ—Å–ª–∏ –Ω–µ—Ç - "–ò—Å–ø—Ä–∞–≤–∏—Ç—å"',
            reply_markup=send_correct(),
        )
        await state.clear()
        await state.set_state(FSM_PICTURE.send)
        await state.update_data(text=text)

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ó–∞–∫–∞–∑
    elif text and FSM_PICTURE.enter_telephone_order == await state.get_state():
        await state.clear()
        await state.update_data(text=text)
        await message.answer(text=LEXICON_PICTURES['addressee'])
        await state.set_state(FSM_PICTURE.for_whom)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–∞–∫—É—é-—Ç–æ –¥–∏—á—å –≤–º–µ—Å—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞  –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif text == '' and (
        FSM_PICTURE.enter_telephone_buy_ready == await state.get_state()
        or FSM_PICTURE.enter_telephone_order == await state.get_state()
    ):
        await message.answer(
            text=f'{LEXICON_RENT["not_telephone"]}\n\n' f'{LEXICON_PICTURES["breaking"]}',
            reply_markup=cancel_picture(),
        )


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å '–î–ª—è –∫–æ–≥–æ –∫–∞—Ä—Ç–∏–Ω–∞'
@router.message(StateFilter(FSM_PICTURE.for_whom))
async def for_whom(message: Message, state: FSMContext):
    await state.update_data(for_whom=message.text)
    await message.answer(text=LEXICON_PICTURES['event'])
    await state.set_state(FSM_PICTURE.event)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ü–æ –∫–∞–∫–æ–º—É —Å–ª—É—á–∞—é'
@router.message(StateFilter(FSM_PICTURE.event))
async def event(message: Message, state: FSMContext):
    await state.update_data(event=message.text)
    await message.answer(text=LEXICON_PICTURES['size'])
    await state.set_state(FSM_PICTURE.size)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å '–†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω—ã'
@router.message(StateFilter(FSM_PICTURE.size))
async def size(message: Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer(text=LEXICON_PICTURES['mood'])
    await state.set_state(FSM_PICTURE.mood)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
@router.message(StateFilter(FSM_PICTURE.mood))
async def mood(message: Message, state: FSMContext):
    await state.update_data(mood=message.text)
    await message.answer(text=LEXICON_PICTURES['color'])
    await state.set_state(FSM_PICTURE.color)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å '–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞'
@router.message(StateFilter(FSM_PICTURE.color))
async def color(message: Message, state: FSMContext):
    await state.update_data(color=message.text)

    data = await state.get_data()

    if data["text"]:
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω
        text = data["text"] + f'''\n–ö–æ–º—É –∫–∞—Ä—Ç–∏–Ω–∞: {data["for_whom"]}
–°–æ–±—ã—Ç–∏–µ: {data["event"]}
–†–∞–∑–º–µ—Ä: {data["size"]}
–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data["mood"]}
–¶–≤–µ—Ç–∞: {data["color"]}\n'''

    await message.answer(
            text=f'–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ -\n\n{text}\n–ï—Å–ª–∏ –≤–µ—Ä–Ω–æ - –∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", –µ—Å–ª–∏ –Ω–µ—Ç - "–ò—Å–ø—Ä–∞–≤–∏—Ç—å"(–û—Ç–≤–µ—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ)',
            reply_markup=send_correct(),
        )
    await state.clear()
    await state.update_data(text=text)
    await state.set_state(FSM_PICTURE.send)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
@router.callback_query(StateFilter(FSM_PICTURE.send), F.data == 'send_contact')
async def send_press(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    await callback.message.answer(text=LEXICON_PICTURES['finish_2'])
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    await callback.message.answer(text=f'{data["text"]}')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏
    await bot.send_message(chat_id=config.tg_bot.admin_ids[0], text=f'{data["text"]}')
    await callback.answer()
    await state.clear()
