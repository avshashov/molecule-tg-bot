from aiogram import F, Router, Bot
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from lexicon.lexicon_ru import LEXICON_RENT, LEXICON_MENU_BUTTONS
from database.database import photo_room, users_db
from keyboards.keyboards import rent, communication_method, how_room, send, menu_kb
from config_data.config import Config, load_config

from aiogram.fsm.context import FSMContext
from fsm.fsm import FSM_RENT
from aiogram.fsm.state import default_state


router = Router()


# –•–µ–Ω–¥–ª–µ—Ä —á—Ç–æ–±—ã –ø–æ–π–º–∞—Ç—å ID —Ñ–æ—Ç–æ–∫
#@router.message(F.photo)
#async def photo(message: Message):
#    print(message.photo[2].file_id)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é '–ê—Ä–µ–Ω–¥–∞'
@router.message(F.text == LEXICON_MENU_BUTTONS['rent'])
async def rent_button(message: Message):
    await message.answer(text=LEXICON_RENT['rent'])
    await message.answer_media_group(media=photo_room)
    await message.answer(text='–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ üëá', reply_markup=rent())


# –•–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö, –∫—Ä–æ–º–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ
@router.message(F.text == '/cancel', ~StateFilter(default_state))
async def cancel_command(message: Message, state: FSMContext):
    await message.answer(text=LEXICON_RENT['cancel'])
    await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@router.message(F.text =='/cancel', StateFilter(default_state))
async def cancel_default(message: Message):
    await message.answer(text=LEXICON_RENT['cancel_default'])


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –ø–æ–º–µ—â–µ–Ω–∏—è'
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.callback_query(F.data == 'rental_request')
async def rental_request_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text=LEXICON_RENT['telephone'])
    await state.set_state(FSM_RENT.enter_telephone)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
@router.message(StateFilter(FSM_RENT.enter_telephone))
@router.message(F.contact, StateFilter(FSM_RENT.enter_telephone))
async def telephone_sent(message: Message, state: FSMContext):
    if message.text:
        text = message.text
    if (message.text and text.isdigit()) or message.contact:
        await state.update_data(enter_telephone=message.text)
        await message.answer(text=LEXICON_RENT['how_contact'], reply_markup=communication_method())
        await state.set_state(FSM_RENT.how_contact)
    else:
        await message.answer(text=f'{LEXICON_RENT["not_telephone"]}\n\n'
                                  f'{LEXICON_RENT["breaking"]}')


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@router.callback_query(StateFilter(FSM_RENT.how_contact),
                       F.data.in_(['call', 'telegram', 'whatsapp']))
async def how_contact_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(how_contact=LEXICON_RENT[callback.data])
    await callback.message.delete()  # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ - {LEXICON_RENT[callback.data]}\n\n'
                                       f'{LEXICON_RENT["date"]}')
    await state.set_state(FSM_RENT.date)


# –•–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
# –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSM_RENT.how_contact))
async def warning_not_contact(message: Message):
    await message.answer(text=f'{LEXICON_RENT["not_contact"]}\n\n'
                              f'{LEXICON_RENT["breaking"]}')


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(StateFilter(FSM_RENT.date))
async def date_sent(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer(text=LEXICON_RENT['event'])
    await state.set_state(FSM_RENT.event)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫
@router.message(StateFilter(FSM_RENT.event))
async def event_sent(message: Message, state: FSMContext):
    await state.update_data(event=message.text)
    await message.answer(text=LEXICON_RENT['how_people'])
    await state.set_state(FSM_RENT.how_people)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫,
# –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ª–æ–≤
@router.message(StateFilter(FSM_RENT.how_people))
async def how_people_sent(message: Message, state: FSMContext):
    text = message.text
    if text.isdigit():
        await state.update_data(how_people=message.text)
        await message.answer(text=LEXICON_RENT['how_room'], reply_markup=how_room())
        await state.set_state(FSM_RENT.how_room)
    else:
        await message.answer(text=f'{LEXICON_RENT["not_people"]}\n\n'
                                  f'{LEXICON_RENT["breaking"]}')


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ª–æ–≤,
# –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(StateFilter(FSM_RENT.how_room),
                       F.data.in_(['one', 'two']))
async def how_room_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(how_room=LEXICON_RENT[callback.data])
    await callback.message.delete()  # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    id = callback.from_user.id
    data = await state.get_data()
    await state.clear()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    text = f'''–ò–º—è: {users_db[id]["name"]}\n
–¢–µ–ª–µ—Ñ–æ–Ω: {data["enter_telephone"]}\n
–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data["how_contact"]}\n
–î–∞—Ç–∞: {data["date"]}\n
–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data["event"]}\n
–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫: {data["how_people"]}\n
–ó–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {data["how_room"]}'''

    await callback.message.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ - {LEXICON_RENT[callback.data]}\n\n'
                                       f'{LEXICON_RENT["finish"]}\n\n'
                                       f'{text}',
                                       reply_markup=send())
    await state.update_data(text=text)


# –•–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ª–æ–≤
# –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSM_RENT.how_room))
async def warning_not_room(message: Message):
    await message.answer(text=f'{LEXICON_RENT["not_room"]}\n\n'
                              f'{LEXICON_RENT["breaking"]}')


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
@router.callback_query(F.data == 'send')
async def send_press(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(text=LEXICON_RENT['sending'])
    data = await state.get_data()
    config: Config = load_config()
    await bot.send_message(chat_id=config.tg_bot.admin_ids[0],
                           text=f'{data["text"]}')
    await state.clear()